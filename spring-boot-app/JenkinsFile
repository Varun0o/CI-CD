pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        echo 'Cloning repository...'
        // Ensure the repository is cloned correctly.
        git branch: 'main', url: 'https://github.com/Varun0o/CI-CD.git'
        echo 'Listing workspace contents after checkout...'
        // List the full workspace to check if the directory exists
        sh 'ls -lR'  // Recursively list all files to confirm the directory structure
      }
    }
    stage('Build and Test') {
      steps {
        echo 'Listing workspace contents before build...'
        // List files to confirm the directory structure before build
        sh 'ls -lR'  // Recursively list all files in the workspace
        echo 'Checking if spring-boot-app exists...'
        // Check if the directory exists before attempting to build
        sh 'if [ -d "spring-boot-app" ]; then echo "Directory exists"; else echo "Directory not found"; fi'
        // Now, attempt to build the project
        sh 'cd spring-boot-app && mvn clean package'  // Build the project
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://172.31.216.182:9000/"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "varun0o/cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            echo 'Listing files before Docker build...'
            // List files to check the directory
            sh 'ls -lR'  // Recursively list all files to confirm directory existence
            echo 'Checking if spring-boot-app exists before Docker build...'
            // Check directory existence before Docker build
            sh 'if [ -d "spring-boot-app" ]; then echo "Directory exists"; else echo "Directory not found"; fi'
            // Build Docker image
            sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .' 
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "CI-CD"
        GIT_USER_NAME = "Varun0o"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "varun.xyz@gmail.com"
            git config user.name "Varun Sharma"
            BUILD_NUMBER=${BUILD_NUMBER}
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
            git add spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }
}
